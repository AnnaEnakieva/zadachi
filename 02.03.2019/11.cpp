/* неработающая хрень*/
#include <iostream>
using namespace std;
void Search (int x, node **p)
// x - ключ вершины, помещаемой в АВЛ-дерево.
// *p - указатель на корень АВЛ-дерева.
// h - флаг, сигнализирующий об увеличении высоты поддерева:
// TRUE - высота поддерева увеличилась, 
// FALSE - высота поддерева не увеличилась.
// При первом обращении к функции Search() h=FALSE.
{
  node *p1, *p2;
  h = FALSE;
  if (*p==NULL)
  { // Вершины в дереве нет; включить ее... 
    *p = new(node);
    h = TRUE; (**p).Key = x; 
    (**p).Count = 1; (**p).Left = (**p).Right = NULL;
    (**p).bal = 0; // Вершине присвоили нулевой баланс.
  }
  else 
  if (x<=(**p).Key) 
  { 
    Search (x,&((**p).Left)); // Вершина уже включена в дерево.
    if (h==TRUE)
      // Если высота поддерева увеличилась, 
      // то выросла левая дуга.
      switch ((**p).bal) 
      {    case 1:  (**p).bal = 0; h = FALSE; break; 
          // Предыдущая несбалансированность уравновесилась.
          case  0: (**p).bal = -1; break; // Вес "склонился" влево.
          case -1: 
            //Балансировка.
            p1 = (**p).Left; 
            if ((*p1).bal==-1) 
           {//Однократный LL-поворот.
               (**p).Left = (*p1).Right; 
               (*p1).Right = *p; 
               (**p).bal = 0; *p = p1; 
           } 
           else 
           {//Двукратный LR-поворот.
               p2 = (*p1).Right; 
               (*p1).Right = (*p2).Left; 
               (*p2).Left = p1; 
               (**p).Left = (*p2).Right; 
               (*p2).Right = *p;
               //Пересчет баланса вершины с указателем p.
               if ((*p2).bal==-1) (**p).bal = 1; 
               else (**p).bal = 0; 
               // Пересчет баланса вершины с указателем p1.
               if ((*p2).bal==1) (*p1).bal = -1; 
               else (*p1).bal = 0;
               *p = p2;
          } 
          (**p).bal = 0; h = FALSE; 
         break; 
      } 
  }
  else //... иначе выросла правая дуга.
     if (x>(**p).Key) 
    { 
      Search (x,&((**p).Right)); 
      // Вершина уже включена в дерево.
      if (h==TRUE)
      // Если высота поддерева увеличилась, 
      // то выросла правая дуга.
      switch ((**p).bal) 
      {    case -1:  (**p).bal = 0; h = FALSE; break; 
           case  0: (**p).bal = 1; break;
           case  1:
              //Балансировка.
              p1 = (**p).Right; 
              if ((*p1).bal==1) 
               { //Однократный RR-поворот.
                 (**p).Right = (*p1).Left; 
                 (*p1).Left = *p; (**p).bal = 0; *p = p1; 
                } 
              else
                 { //Двухкратный RL-поворот.
                    p2 = (*p1).Left; (*p1).Left = (*p2).Right; 
                   (*p2).Right = p1; (**p).Right = (*p2).Left; 
                   (*p2).Left = *p; 
                   // Пересчет баланса вершины с указателем p.
                   if ((*p2).bal==1) (**p).bal = -1; 
                   else (**p).bal = 0; 
                   //Пересчет баланса вершины с указателем p1.
                   if ((*p2).bal==-1) (*p1).bal = 1; 
                   else (*p1).bal = 0; *p = p2; 
                  } 
              (**p).bal = 0; h = FALSE; break;
       }
    }
}
